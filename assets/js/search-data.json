{
  
    
        "post0": {
            "title": "Title",
            "content": "import pandas as pd import os import numpy as np . #to change directory os.chdir(&quot;/Users/guneshs/datasets&quot;) #mac, linux #os.chdir(&quot;D: Pandas&quot;) # windows . #to list files in the present directory os.listdir() . [&#39;.DS_Store&#39;, &#39;Iris_data_sample.txt&#39;, &#39;Iris_data_sample.xlsx&#39;, &#39;filtered.csv&#39;, &#39;Iris_data_sample.csv&#39;, &#39;Toyota.csv&#39;] . Load datasets into panda dataframe . #load data from CSV file to a pandas dataframe data_csv = pd.read_csv(&#39;Iris_data_sample.csv&#39;) . data_csv . Unnamed: 0 SepalLengthCm SepalWidthCm PetalLengthCm PetalWidthCm Species . 0 1 | 5.1 | 3.5 | 1.4 | 0.2 | Iris-setosa | . 1 2 | 4.9 | NaN | 1.4 | 0.2 | NaN | . 2 3 | 4.7 | 3.2 | 1.3 | 0.2 | Iris-setosa | . 3 4 | ?? | 3.1 | 1.5 | 0.2 | Iris-setosa | . 4 5 | 5 | 3.6 | ### | 0.2 | Iris-setosa | . 5 6 | 5.4 | 3.9 | NaN | 0.4 | Iris-setosa | . 6 7 | 4.6 | 3.4 | 1.4 | 0.3 | Iris-setosa | . 7 8 | 5 | 3.4 | 1.5 | 0.2 | Iris-setosa | . 8 9 | 4.4 | 2.9 | 1.4 | 0.2 | Iris-setosa | . 9 10 | 4.9 | 3.1 | 1.5 | 0.1 | Iris-setosa | . 10 11 | 5.4 | 3.7 | 1.5 | 0.2 | Iris-setosa | . 11 12 | 4.8 | 3.4 | 1.6 | 0.2 | Iris-setosa | . 12 13 | 4.8 | 3.0 | 1.4 | 0.1 | Iris-setosa | . 13 14 | 4.3 | 3.0 | 1.1 | 0.1 | Iris-setosa | . 14 15 | 5.8 | 4.0 | 1.2 | 0.2 | Iris-setosa | . 15 16 | 5.7 | 4.4 | 1.5 | 0.4 | Iris-setosa | . 16 17 | 5.4 | 3.9 | 1.3 | 0.4 | Iris-setosa | . 17 18 | 5.1 | 3.5 | 1.4 | 0.3 | Iris-setosa | . 18 19 | 5.7 | 3.8 | 1.7 | 0.3 | Iris-setosa | . 19 20 | 5.1 | 3.8 | 1.5 | 0.3 | Iris-setosa | . 20 21 | 5.4 | 3.4 | 1.7 | 0.2 | Iris-setosa | . 21 22 | 5.1 | 3.7 | 1.5 | 0.4 | Iris-setosa | . 22 23 | 4.6 | 3.6 | 1 | 0.2 | Iris-setosa | . 23 24 | 5.1 | 3.3 | 1.7 | 0.5 | Iris-setosa | . 24 25 | 4.8 | 3.4 | 1.9 | 0.2 | Iris-setosa | . 25 26 | 5 | 3.0 | 1.6 | 0.2 | Iris-setosa | . 26 27 | 5 | 3.4 | 1.6 | 0.4 | Iris-setosa | . 27 28 | 5.2 | 3.5 | 1.5 | 0.2 | Iris-setosa | . 28 29 | 5.2 | 3.4 | 1.4 | 0.2 | Iris-setosa | . 29 30 | 4.7 | 3.2 | 1.6 | 0.2 | Iris-setosa | . ... ... | ... | ... | ... | ... | ... | . 120 121 | 6.9 | 3.2 | 5.7 | 2.3 | Iris-virginica | . 121 122 | 5.6 | 2.8 | 4.9 | 2.0 | Iris-virginica | . 122 123 | 7.7 | 2.8 | 6.7 | 2.0 | Iris-virginica | . 123 124 | 6.3 | 2.7 | 4.9 | 1.8 | Iris-virginica | . 124 125 | 6.7 | 3.3 | 5.7 | 2.1 | Iris-virginica | . 125 126 | 7.2 | 3.2 | 6 | 1.8 | Iris-virginica | . 126 127 | 6.2 | 2.8 | 4.8 | 1.8 | Iris-virginica | . 127 128 | 6.1 | 3.0 | 4.9 | 1.8 | Iris-virginica | . 128 129 | 6.4 | 2.8 | 5.6 | 2.1 | Iris-virginica | . 129 130 | 7.2 | 3.0 | 5.8 | 1.6 | Iris-virginica | . 130 131 | 7.4 | 2.8 | 6.1 | 1.9 | Iris-virginica | . 131 132 | 7.9 | 3.8 | 6.4 | 2.0 | Iris-virginica | . 132 133 | 6.4 | 2.8 | 5.6 | 2.2 | Iris-virginica | . 133 134 | 6.3 | 2.8 | 5.1 | 1.5 | Iris-virginica | . 134 135 | 6.1 | 2.6 | 5.6 | 1.4 | Iris-virginica | . 135 136 | 7.7 | 3.0 | 6.1 | 2.3 | Iris-virginica | . 136 137 | 6.3 | 3.4 | 5.6 | 2.4 | Iris-virginica | . 137 138 | 6.4 | 3.1 | 5.5 | 1.8 | Iris-virginica | . 138 139 | 6 | 3.0 | 4.8 | 1.8 | Iris-virginica | . 139 140 | 6.9 | 3.1 | 5.4 | 2.1 | Iris-virginica | . 140 141 | 6.7 | 3.1 | 5.6 | 2.4 | Iris-virginica | . 141 142 | 6.9 | 3.1 | 5.1 | 2.3 | Iris-virginica | . 142 143 | 5.8 | 2.7 | 5.1 | 1.9 | Iris-virginica | . 143 144 | 6.8 | 3.2 | 5.9 | 2.3 | Iris-virginica | . 144 145 | 6.7 | 3.3 | 5.7 | 2.5 | Iris-virginica | . 145 146 | 6.7 | 3.0 | 5.2 | 2.3 | Iris-virginica | . 146 147 | 6.3 | 2.5 | 5 | 1.9 | Iris-virginica | . 147 148 | 6.5 | 3.0 | 5.2 | 2.0 | Iris-virginica | . 148 149 | 6.2 | 3.4 | 5.4 | 2.3 | Iris-virginica | . 149 150 | 5.9 | 3.0 | 5.1 | 1.8 | Iris-virginica | . 150 rows × 6 columns . #to set index column of df data_csv = pd.read_csv(&#39;Iris_data_sample.csv&#39;, index_col=0) . #to replace the junk values in df data_csv = pd.read_csv(&#39;Iris_data_sample.csv&#39;, index_col=0, na_values=[&quot;??&quot;, &quot;###&quot;]) . #to get first 5 rows...if you want n values...place head(n)...n can be 6 or anyno. data_csv.head() #to get last 5 rows #data_csv.tail() . SepalLengthCm SepalWidthCm PetalLengthCm PetalWidthCm Species . 1 5.1 | 3.5 | 1.4 | 0.2 | Iris-setosa | . 2 4.9 | NaN | 1.4 | 0.2 | NaN | . 3 4.7 | 3.2 | 1.3 | 0.2 | Iris-setosa | . 4 NaN | 3.1 | 1.5 | 0.2 | Iris-setosa | . 5 5.0 | 3.6 | NaN | 0.2 | Iris-setosa | . #importing excel files data_xlsx=pd.read_excel(&#39;Iris_data_sample.xlsx&#39;, sheet_name=&#39;Iris_data&#39;) . data_xlsx.head() . SepalLengthCm SepalWidthCm PetalLengthCm PetalWidthCm Species . 1 5.1 | 3.5 | 1.4 | 0.2 | Iris-setosa | . 2 4.9 | NaN | 1.4 | 0.2 | NaN | . 3 4.7 | 3.2 | 1.3 | 0.2 | Iris-setosa | . 4 ?? | 3.1 | 1.5 | 0.2 | Iris-setosa | . 5 5 | 3.6 | ### | 0.2 | Iris-setosa | . #importing txt files data_txt1=pd.read_table(&#39;Iris_data_sample.txt&#39;, sep=&quot; &quot;) #data_txt1 = pd.read_table(&#39;Iris_data_sample.txt&#39;, delimiter=&quot; &quot;) #you can also include tabs (&quot; t&quot;) , commas and blanks . data_txt1.head() . Unnamed: 0 SepalLengthCm SepalWidthCm PetalLengthCm PetalWidthCm Species . 1 1 | 5.1 | 3.5 | 1.4 | 0.2 | Iris-setosa | . 2 2 | 4.9 | 3.0 | 1.4 | 0.2 | Iris-setosa | . 3 3 | 4.7 | 3.2 | 1.3 | 0.2 | Iris-setosa | . 4 4 | 4.6 | 3.1 | 1.5 | 0.2 | Iris-setosa | . 5 5 | 5.0 | 3.6 | 1.4 | 0.2 | Iris-setosa | . Insert Cars dataset into pandas dataframe . # Car dataset cars_data = pd.read_csv(&#39;Toyota.csv&#39;, index_col = 0) . cars_data.head(6) . Price Age KM FuelType HP MetColor Automatic CC Doors Weight . 0 13500 | 23.0 | 46986 | Diesel | 90 | 1.0 | 0 | 2000 | three | 1165 | . 1 13750 | 23.0 | 72937 | Diesel | 90 | 1.0 | 0 | 2000 | 3 | 1165 | . 2 13950 | 24.0 | 41711 | Diesel | 90 | NaN | 0 | 2000 | 3 | 1165 | . 3 14950 | 26.0 | 48000 | Diesel | 90 | 0.0 | 0 | 2000 | 3 | 1165 | . 4 13750 | 30.0 | 38500 | Diesel | 90 | 0.0 | 0 | 2000 | 3 | 1170 | . 5 12950 | 32.0 | 61000 | Diesel | 90 | 0.0 | 0 | 2000 | 3 | 1170 | . #Attributes of data #TWO ways of copy in python # 1. shallow copy # sample = cars_data.copy(deep=False) # 2. deep copy cars_data1 = cars_data.copy(deep=True) . #to display row labels cars_data1.index . Int64Index([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ... 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435], dtype=&#39;int64&#39;, length=1436) . #to display column labels cars_data1.columns . Index([&#39;Price&#39;, &#39;Age&#39;, &#39;KM&#39;, &#39;FuelType&#39;, &#39;HP&#39;, &#39;MetColor&#39;, &#39;Automatic&#39;, &#39;CC&#39;, &#39;Doors&#39;, &#39;Weight&#39;], dtype=&#39;object&#39;) . #to get total no of elements cars_data1.size . 14360 . #to get dimensions of dataframe (df) rows and columns cars_data1.shape . (1436, 10) . #to get memory usage of each column cars_data1.memory_usage() . Index 11488 Price 11488 Age 11488 KM 11488 FuelType 11488 HP 11488 MetColor 11488 Automatic 11488 CC 11488 Doors 11488 Weight 11488 dtype: int64 . #to get no. of axes / array dimensions cars_data1.ndim . 2 . #indexing and selecting data #slicing operator [] and dot operaror . used for indexing #it provides quick and easy access to pd data structures cars_data1.head(10) . Price Age KM FuelType HP MetColor Automatic CC Doors Weight . 0 13500 | 23.0 | 46986 | Diesel | 90 | 1.0 | 0 | 2000 | three | 1165 | . 1 13750 | 23.0 | 72937 | Diesel | 90 | 1.0 | 0 | 2000 | 3 | 1165 | . 2 13950 | 24.0 | 41711 | Diesel | 90 | NaN | 0 | 2000 | 3 | 1165 | . 3 14950 | 26.0 | 48000 | Diesel | 90 | 0.0 | 0 | 2000 | 3 | 1165 | . 4 13750 | 30.0 | 38500 | Diesel | 90 | 0.0 | 0 | 2000 | 3 | 1170 | . 5 12950 | 32.0 | 61000 | Diesel | 90 | 0.0 | 0 | 2000 | 3 | 1170 | . 6 16900 | 27.0 | ?? | Diesel | ???? | NaN | 0 | 2000 | 3 | 1245 | . 7 18600 | 30.0 | 75889 | NaN | 90 | 1.0 | 0 | 2000 | 3 | 1245 | . 8 21500 | 27.0 | 19700 | Petrol | 192 | 0.0 | 0 | 1800 | 3 | 1185 | . 9 12950 | 23.0 | 71138 | Diesel | ???? | NaN | 0 | 1900 | 3 | 1105 | . # To access scalar values, use at and iat methods # at : it provides label-based lookup # iat : it provides integer-based lookup cars_data1.at[4, &#39;FuelType&#39;] . &#39;Diesel&#39; . cars_data1.iat[2,2] . &#39;41711&#39; . # To access a group of rows and columns by label(s) # .loc[] cars_data1.loc[:,&#39;FuelType&#39;] . 0 Diesel 1 Diesel 2 Diesel 3 Diesel 4 Diesel 5 Diesel 6 Diesel 7 NaN 8 Petrol 9 Diesel 10 Petrol 11 Petrol 12 Petrol 13 Petrol 14 Petrol 15 Petrol 16 Petrol 17 Petrol 18 Petrol 19 Petrol 20 Petrol 21 NaN 22 Petrol 23 Petrol 24 Petrol 25 Petrol 26 NaN 27 Petrol 28 Petrol 29 NaN ... 1406 Petrol 1407 Petrol 1408 Petrol 1409 Petrol 1410 Petrol 1411 Petrol 1412 Petrol 1413 Petrol 1414 Petrol 1415 Petrol 1416 Petrol 1417 Petrol 1418 Petrol 1419 Petrol 1420 NaN 1421 Petrol 1422 NaN 1423 Petrol 1424 Petrol 1425 Petrol 1426 Petrol 1427 Petrol 1428 Petrol 1429 Petrol 1430 Petrol 1431 Petrol 1432 Petrol 1433 Petrol 1434 NaN 1435 Petrol Name: FuelType, Length: 1436, dtype: object . Data Types . Numeric | Character | Checking data types of each column . cars_data1.dtypes . Price int64 Age float64 KM object FuelType object HP object MetColor float64 Automatic int64 CC int64 Doors object Weight int64 dtype: object . Count of unique data types . cars_data1.get_dtype_counts() . float64 2 int64 4 object 4 dtype: int64 . Seleting data based on data types . cars_data1.select_dtypes(include=[], exclude=[object]) . Price Age MetColor Automatic CC Weight . 0 13500 | 23.0 | 1.0 | 0 | 2000 | 1165 | . 1 13750 | 23.0 | 1.0 | 0 | 2000 | 1165 | . 2 13950 | 24.0 | NaN | 0 | 2000 | 1165 | . 3 14950 | 26.0 | 0.0 | 0 | 2000 | 1165 | . 4 13750 | 30.0 | 0.0 | 0 | 2000 | 1170 | . 5 12950 | 32.0 | 0.0 | 0 | 2000 | 1170 | . 6 16900 | 27.0 | NaN | 0 | 2000 | 1245 | . 7 18600 | 30.0 | 1.0 | 0 | 2000 | 1245 | . 8 21500 | 27.0 | 0.0 | 0 | 1800 | 1185 | . 9 12950 | 23.0 | NaN | 0 | 1900 | 1105 | . 10 20950 | 25.0 | 0.0 | 0 | 1800 | 1185 | . 11 19950 | 22.0 | 0.0 | 0 | 1800 | 1185 | . 12 19600 | 25.0 | 0.0 | 0 | 1800 | 1185 | . 13 21500 | 31.0 | 1.0 | 0 | 1800 | 1185 | . 14 22500 | 32.0 | 1.0 | 0 | 1800 | 1185 | . 15 22000 | 28.0 | 0.0 | 0 | 1800 | 1185 | . 16 22750 | 30.0 | 1.0 | 0 | 1800 | 1185 | . 17 17950 | 24.0 | 1.0 | 0 | 1600 | 1105 | . 18 16750 | 24.0 | 0.0 | 0 | 1600 | 1065 | . 19 16950 | 30.0 | 1.0 | 0 | 1600 | 1105 | . 20 15950 | 30.0 | 1.0 | 0 | 1600 | 1105 | . 21 16950 | 29.0 | 0.0 | 1 | 1600 | 1170 | . 22 15950 | 28.0 | 1.0 | 0 | 1600 | 1120 | . 23 16950 | 28.0 | 1.0 | 0 | 1600 | 1120 | . 24 16250 | 29.0 | 1.0 | 0 | 1600 | 1120 | . 25 15950 | 25.0 | 1.0 | 0 | 1600 | 1120 | . 26 17495 | 27.0 | 1.0 | 0 | 1600 | 1120 | . 27 15750 | 29.0 | 1.0 | 0 | 1600 | 1120 | . 28 16950 | 28.0 | 0.0 | 0 | 1600 | 1120 | . 29 17950 | 30.0 | NaN | 0 | 1600 | 1120 | . ... ... | ... | ... | ... | ... | ... | . 1406 8950 | 70.0 | 1.0 | 0 | 1600 | 1050 | . 1407 8250 | 69.0 | 0.0 | 0 | 1600 | 1075 | . 1408 9250 | NaN | 1.0 | 0 | 1600 | 1050 | . 1409 7900 | 75.0 | NaN | 0 | 1600 | 1070 | . 1410 8500 | 78.0 | 1.0 | 0 | 1300 | 1000 | . 1411 7950 | 76.0 | 0.0 | 0 | 1600 | 1070 | . 1412 9950 | 69.0 | 1.0 | 0 | 1600 | 1050 | . 1413 8750 | 74.0 | 1.0 | 1 | 1600 | 1100 | . 1414 7500 | 80.0 | 1.0 | 0 | 1600 | 1050 | . 1415 6950 | 72.0 | NaN | 0 | 1600 | 1050 | . 1416 8950 | NaN | 0.0 | 0 | 1600 | 1114 | . 1417 8750 | 79.0 | 0.0 | 1 | 1600 | 1080 | . 1418 7750 | 73.0 | NaN | 0 | 1300 | 1015 | . 1419 8450 | 75.0 | NaN | 0 | 1600 | 1050 | . 1420 8150 | 76.0 | 0.0 | 1 | 1600 | 1075 | . 1421 8500 | 78.0 | 0.0 | 1 | 1300 | 1045 | . 1422 7600 | NaN | 1.0 | 0 | 1600 | 1050 | . 1423 7950 | 80.0 | 0.0 | 1 | 1300 | 1015 | . 1424 7750 | 73.0 | 0.0 | 0 | 1300 | 1015 | . 1425 7950 | 80.0 | 1.0 | 0 | 1300 | 1000 | . 1426 9950 | 78.0 | NaN | 1 | 1600 | 1080 | . 1427 8950 | NaN | 1.0 | 1 | 1300 | 1045 | . 1428 8450 | 72.0 | NaN | 0 | 1300 | 1015 | . 1429 8950 | 78.0 | 1.0 | 1 | 1300 | 1065 | . 1430 8450 | 80.0 | 0.0 | 0 | 1300 | 1015 | . 1431 7500 | NaN | 1.0 | 0 | 1300 | 1025 | . 1432 10845 | 72.0 | 0.0 | 0 | 1300 | 1015 | . 1433 8500 | NaN | 0.0 | 0 | 1300 | 1015 | . 1434 7250 | 70.0 | 1.0 | 0 | 1300 | 1015 | . 1435 6950 | 76.0 | 0.0 | 0 | 1600 | 1114 | . 1436 rows × 6 columns . Concise Summary of Dataframe . cars_data1.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Int64Index: 1436 entries, 0 to 1435 Data columns (total 10 columns): Price 1436 non-null int64 Age 1336 non-null float64 KM 1436 non-null object FuelType 1336 non-null object HP 1436 non-null object MetColor 1286 non-null float64 Automatic 1436 non-null int64 CC 1436 non-null int64 Doors 1436 non-null object Weight 1436 non-null int64 dtypes: float64(2), int64(4), object(4) memory usage: 123.4+ KB . Unique Elements of Columns using numpy . print(np.unique(cars_data1[&#39;KM&#39;])) . [&#39;1&#39; &#39;10000&#39; &#39;100123&#39; ... &#39;99865&#39; &#39;99971&#39; &#39;??&#39;] . print(np.unique(cars_data1[&#39;HP&#39;])) . [&#39;107&#39; &#39;110&#39; &#39;116&#39; &#39;192&#39; &#39;69&#39; &#39;71&#39; &#39;72&#39; &#39;73&#39; &#39;86&#39; &#39;90&#39; &#39;97&#39; &#39;98&#39; &#39;????&#39;] . print(np.unique(cars_data1[&#39;MetColor&#39;])) . [ 0. 1. nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan] . print(np.unique(cars_data1[&#39;Automatic&#39;])) . [0 1] . print(np.unique(cars_data1[&#39;Doors&#39;])) . [&#39;2&#39; &#39;3&#39; &#39;4&#39; &#39;5&#39; &#39;five&#39; &#39;four&#39; &#39;three&#39;] . create a new dataframe from cars_data1 . ## create a new dataframe from cars_data1 cars_data2 = pd.read_csv(&#39;Toyota.csv&#39;, index_col=0, na_values=[&quot;??&quot;,&quot;????&quot;]) . print(np.unique(cars_data2[&#39;KM&#39;])) . [ 1. 15. 225. ... nan nan nan] . print(np.unique(cars_data2[&#39;HP&#39;])) . [ 69. 71. 72. 73. 86. 90. 97. 98. 107. 110. 116. 192. nan nan nan nan nan nan] . cars_data1.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Int64Index: 1436 entries, 0 to 1435 Data columns (total 10 columns): Price 1436 non-null int64 Age 1336 non-null float64 KM 1436 non-null object FuelType 1336 non-null object HP 1436 non-null object MetColor 1286 non-null float64 Automatic 1436 non-null int64 CC 1436 non-null int64 Doors 1436 non-null object Weight 1436 non-null int64 dtypes: float64(2), int64(4), object(4) memory usage: 123.4+ KB . cars_data2.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Int64Index: 1436 entries, 0 to 1435 Data columns (total 10 columns): Price 1436 non-null int64 Age 1336 non-null float64 KM 1421 non-null float64 FuelType 1336 non-null object HP 1430 non-null float64 MetColor 1286 non-null float64 Automatic 1436 non-null int64 CC 1436 non-null int64 Doors 1436 non-null object Weight 1436 non-null int64 dtypes: float64(4), int64(4), object(2) memory usage: 123.4+ KB . Converting variable&#8217;s data types . cars_data2[&#39;MetColor&#39;] = cars_data2[&#39;MetColor&#39;].astype(&#39;object&#39;) . cars_data2.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Int64Index: 1436 entries, 0 to 1435 Data columns (total 10 columns): Price 1436 non-null int64 Age 1336 non-null float64 KM 1421 non-null float64 FuelType 1336 non-null object HP 1430 non-null float64 MetColor 1286 non-null object Automatic 1436 non-null int64 CC 1436 non-null int64 Doors 1436 non-null object Weight 1436 non-null int64 dtypes: float64(3), int64(4), object(3) memory usage: 123.4+ KB . cars_data2[&#39;Automatic&#39;] = cars_data2[&#39;Automatic&#39;].astype(&#39;object&#39;) . category vs object data type Memory Usage in bytes . cars_data2[&#39;FuelType&#39;].nbytes . 11488 . cars_data2[&#39;FuelType&#39;].astype(&#39;category&#39;).nbytes . 1460 . cars_data2.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Int64Index: 1436 entries, 0 to 1435 Data columns (total 10 columns): Price 1436 non-null int64 Age 1336 non-null float64 KM 1421 non-null float64 FuelType 1336 non-null object HP 1430 non-null float64 MetColor 1286 non-null object Automatic 1436 non-null object CC 1436 non-null int64 Doors 1436 non-null object Weight 1436 non-null int64 dtypes: float64(3), int64(3), object(4) memory usage: 123.4+ KB . Cleaning column &#8216;Doors&#8217; using replace function . cars_data2[&#39;Doors&#39;].replace(&#39;three&#39;,3, inplace=True) . cars_data2[&#39;Doors&#39;].replace(&#39;four&#39;,4, inplace=True) . cars_data2[&#39;Doors&#39;].replace(&#39;five&#39;,5, inplace=True) . cars_data2[&#39;Doors&#39;] = cars_data2[&#39;Doors&#39;].astype(&#39;int64&#39;) . cars_data2.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Int64Index: 1436 entries, 0 to 1435 Data columns (total 10 columns): Price 1436 non-null int64 Age 1336 non-null float64 KM 1421 non-null float64 FuelType 1336 non-null object HP 1430 non-null float64 MetColor 1286 non-null object Automatic 1436 non-null object CC 1436 non-null int64 Doors 1436 non-null int64 Weight 1436 non-null int64 dtypes: float64(3), int64(4), object(3) memory usage: 123.4+ KB . Exporting data into files . cars_data2.to_csv(&#39;filtered.csv&#39;, index=False) # Exporting to excel files # cars_data2.to_excel(&#39;filtered.xlsx&#39;, index=False) # Exporting to text files # cars_data2.to_csv(&#39;filtered.txt&#39;, index=False, sep=&quot; t&quot;) . print(np.unique(cars_data2[&#39;Doors&#39;])) . [2 3 4 5] . To detect missing values using isnull() and sum it . cars_data2.isnull().sum() . Price 0 Age 100 KM 15 FuelType 100 HP 6 MetColor 150 Automatic 0 CC 0 Doors 0 Weight 0 dtype: int64 . Inserting a new column in the dataframe cars_data2 . cars_data2.insert(10,&quot;Price_class&quot;, &quot;&quot;) . cars_data2.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Int64Index: 1436 entries, 0 to 1435 Data columns (total 11 columns): Price 1436 non-null int64 Age 1336 non-null float64 KM 1421 non-null float64 FuelType 1336 non-null object HP 1430 non-null float64 MetColor 1286 non-null object Automatic 1436 non-null object CC 1436 non-null int64 Doors 1436 non-null int64 Weight 1436 non-null int64 Price_class 1436 non-null object dtypes: float64(3), int64(4), object(4) memory usage: 134.6+ KB . For loop to categorize cars prices and save in the new column . for i in range(0, len(cars_data2[&quot;Price&quot;]), 1): if(cars_data2[&quot;Price&quot;][i]&lt;=8450): cars_data2[&quot;Price_class&quot;][i]=&quot;Low&quot; elif((cars_data2[&quot;Price&quot;][i]&gt;11950)): cars_data2[&quot;Price_class&quot;][i]=&quot;High&quot; else: cars_data2[&quot;Price_class&quot;][i]=&quot;Medium&quot; . /Users/guneshs/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy &#34;&#34;&#34; /Users/guneshs/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:3: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy This is separate from the ipykernel package so we can avoid doing imports until /Users/guneshs/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:7: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy import sys . print(cars_data2[&quot;Price_class&quot;]) . 0 High 1 High 2 High 3 High 4 High 5 High 6 High 7 High 8 High 9 High 10 High 11 High 12 High 13 High 14 High 15 High 16 High 17 High 18 High 19 High 20 High 21 High 22 High 23 High 24 High 25 High 26 High 27 High 28 High 29 High ... 1406 Medium 1407 Low 1408 Medium 1409 Low 1410 Medium 1411 Low 1412 Medium 1413 Medium 1414 Low 1415 Low 1416 Medium 1417 Medium 1418 Low 1419 Low 1420 Low 1421 Medium 1422 Low 1423 Low 1424 Low 1425 Low 1426 Medium 1427 Medium 1428 Low 1429 Medium 1430 Low 1431 Low 1432 Medium 1433 Medium 1434 Low 1435 Low Name: Price_class, Length: 1436, dtype: object . While loop to categorize cars prices and save in the new column . i=0 while i&lt;len(cars_data2[&quot;Price&quot;]): if(cars_data2[&quot;Price&quot;][i]&lt;=8450): cars_data2[&quot;Price_class&quot;][i]=&quot;Low&quot; elif((cars_data2[&quot;Price&quot;][i]&gt;11950)): cars_data2[&quot;Price_class&quot;][i]=&quot;High&quot; else: cars_data2[&quot;Price_class&quot;][i]=&quot;Medium&quot; i=i+1 . /Users/guneshs/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:7: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy import sys /Users/guneshs/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy &#34;&#34;&#34; /Users/guneshs/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:9: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy if __name__ == &#39;__main__&#39;: . cars_data2[&quot;Price_class&quot;] . 0 High 1 High 2 High 3 High 4 High 5 High 6 High 7 High 8 High 9 High 10 High 11 High 12 High 13 High 14 High 15 High 16 High 17 High 18 High 19 High 20 High 21 High 22 High 23 High 24 High 25 High 26 High 27 High 28 High 29 High ... 1406 Medium 1407 Low 1408 Medium 1409 Low 1410 Medium 1411 Low 1412 Medium 1413 Medium 1414 Low 1415 Low 1416 Medium 1417 Medium 1418 Low 1419 Low 1420 Low 1421 Medium 1422 Low 1423 Low 1424 Low 1425 Low 1426 Medium 1427 Medium 1428 Low 1429 Medium 1430 Low 1431 Low 1432 Medium 1433 Medium 1434 Low 1435 Low Name: Price_class, Length: 1436, dtype: object . Count of unique values in the Price_class column . cars_data2[&quot;Price_class&quot;].value_counts() . Medium 751 Low 369 High 316 Name: Price_class, dtype: int64 . Functions . Single Input Single Output . cars_data2.insert(11, &quot;Age_converted&quot;, 0) . Function to convert cars age from Months to years . def c_convert(val): val_converted = val/12 return val_converted . cars_data2[&quot;age_converted&quot;]=c_convert(cars_data2[&#39;Age&#39;]) . cars_data2[&quot;age_converted&quot;]=round(c_convert(cars_data2[&#39;Age&#39;]), 1) . Multi Input Multi Output . cars_data2.insert(12, &quot;KM_per_month&quot;, 0) . Function to convert cars age from Months to years and to find KM per month run by car . def c_convert(val1, val2): val_converted = val1/12 ratio = val2/val1 return [val_converted, ratio] . cars_data2[&quot;age_converted&quot;],cars_data2[&quot;KM_per_month&quot;] = c_convert(cars_data2[&#39;Age&#39;], cars_data2[&#39;KM&#39;]) . cars_data2.head() . Price Age KM FuelType HP MetColor Automatic CC Doors Weight Price_class KM_per_month age_converted . 0 13500 | 23.0 | 46986.0 | Diesel | 90.0 | 1 | 0 | 2000 | 3 | 1165 | High | 2042.869565 | 1.916667 | . 1 13750 | 23.0 | 72937.0 | Diesel | 90.0 | 1 | 0 | 2000 | 3 | 1165 | High | 3171.173913 | 1.916667 | . 2 13950 | 24.0 | 41711.0 | Diesel | 90.0 | NaN | 0 | 2000 | 3 | 1165 | High | 1737.958333 | 2.000000 | . 3 14950 | 26.0 | 48000.0 | Diesel | 90.0 | 0 | 0 | 2000 | 3 | 1165 | High | 1846.153846 | 2.166667 | . 4 13750 | 30.0 | 38500.0 | Diesel | 90.0 | 0 | 0 | 2000 | 3 | 1170 | High | 1283.333333 | 2.500000 | . Dropping unwanted columns from the dataframe . cars_data2 = cars_data2.drop(columns=[&#39;Age_converted&#39;]) . Sorting Values in the dataframe . cars_data2.sort_values([&#39;FuelType&#39;, &#39;HP&#39;], ascending=[1,0]) . Price Age KM FuelType HP MetColor Automatic CC Doors Weight Price_class KM_per_month age_converted . 189 7750 | 43.0 | 178858.0 | CNG | 110.0 | 0 | 0 | 1600 | 3 | 1084 | Low | 4159.488372 | 3.583333 | . 199 11950 | NaN | 98823.0 | CNG | 110.0 | 1 | 0 | 1600 | 5 | 1119 | Medium | NaN | NaN | . 209 11950 | 37.0 | 82743.0 | CNG | 110.0 | 1 | 0 | 1600 | 5 | 1121 | Medium | 2236.297297 | 3.083333 | . 223 14950 | 44.0 | 71793.0 | CNG | 110.0 | NaN | 0 | 1600 | 4 | 1067 | High | 1631.659091 | 3.666667 | . 296 12950 | 44.0 | 41499.0 | CNG | 110.0 | 1 | 0 | 1600 | 5 | 1103 | High | 943.159091 | 3.666667 | . 383 8500 | 55.0 | 150000.0 | CNG | 110.0 | 1 | 0 | 1600 | 3 | 1075 | Medium | 2727.272727 | 4.583333 | . 387 9250 | 48.0 | 142130.0 | CNG | 110.0 | 0 | 0 | 1600 | 5 | 1119 | Medium | 2961.041667 | 4.000000 | . 436 11500 | 47.0 | 78785.0 | CNG | 110.0 | 1 | 0 | 1600 | 5 | 1119 | Medium | 1676.276596 | 3.916667 | . 622 8950 | 59.0 | 137050.0 | CNG | 110.0 | 1 | 0 | 1600 | 3 | 1078 | Medium | 2322.881356 | 4.916667 | . 624 7950 | 67.0 | 135337.0 | CNG | 110.0 | 1 | 0 | 1600 | 5 | 1120 | Low | 2019.955224 | 5.583333 | . 650 9450 | 60.0 | 115191.0 | CNG | 110.0 | NaN | 0 | 1600 | 4 | 1079 | Medium | 1919.850000 | 5.000000 | . 652 9450 | 63.0 | 115000.0 | CNG | 110.0 | 0 | 0 | 1600 | 3 | 1109 | Medium | 1825.396825 | 5.250000 | . 1047 5250 | 79.0 | 207114.0 | CNG | 110.0 | 1 | 0 | 1600 | 5 | 1114 | Low | 2621.696203 | 6.583333 | . 1072 6450 | 71.0 | 151000.0 | CNG | 110.0 | 1 | 0 | 1600 | 5 | 1094 | Low | 2126.760563 | 5.916667 | . 1122 7460 | 80.0 | 111392.0 | CNG | 110.0 | 0 | 0 | 1598 | 3 | 1083 | Low | 1392.400000 | 6.666667 | . 110 31000 | 4.0 | 4000.0 | Diesel | 116.0 | 1 | 0 | 2000 | 5 | 1480 | High | 1000.000000 | 0.333333 | . 111 31275 | 4.0 | 1500.0 | Diesel | 116.0 | 1 | 0 | 2000 | 5 | 1480 | High | 375.000000 | 0.333333 | . 112 24950 | 8.0 | NaN | Diesel | 116.0 | 1 | 0 | 2000 | 5 | 1320 | High | NaN | 0.666667 | . 113 24950 | 8.0 | 13253.0 | Diesel | 116.0 | 1 | 0 | 2000 | 5 | 1320 | High | 1656.625000 | 0.666667 | . 114 22950 | 7.0 | 10000.0 | Diesel | 116.0 | 1 | 0 | 2000 | 5 | 1270 | High | 1428.571429 | 0.583333 | . 138 23000 | 11.0 | 25000.0 | Diesel | 116.0 | 1 | 0 | 2000 | 5 | 1320 | High | 2272.727273 | 0.916667 | . 634 8950 | 62.0 | 125175.0 | Diesel | 116.0 | 0 | 0 | 2000 | 5 | 1150 | Medium | 2018.951613 | 5.166667 | . 68 22250 | 22.0 | 30000.0 | Diesel | 110.0 | 1 | 0 | 2000 | 5 | 1275 | High | 1363.636364 | 1.833333 | . 89 21950 | 19.0 | 50005.0 | Diesel | 110.0 | 1 | 0 | 2000 | 3 | 1265 | High | 2631.842105 | 1.583333 | . 0 13500 | 23.0 | 46986.0 | Diesel | 90.0 | 1 | 0 | 2000 | 3 | 1165 | High | 2042.869565 | 1.916667 | . 1 13750 | 23.0 | 72937.0 | Diesel | 90.0 | 1 | 0 | 2000 | 3 | 1165 | High | 3171.173913 | 1.916667 | . 2 13950 | 24.0 | 41711.0 | Diesel | 90.0 | NaN | 0 | 2000 | 3 | 1165 | High | 1737.958333 | 2.000000 | . 3 14950 | 26.0 | 48000.0 | Diesel | 90.0 | 0 | 0 | 2000 | 3 | 1165 | High | 1846.153846 | 2.166667 | . 4 13750 | 30.0 | 38500.0 | Diesel | 90.0 | 0 | 0 | 2000 | 3 | 1170 | High | 1283.333333 | 2.500000 | . 5 12950 | 32.0 | 61000.0 | Diesel | 90.0 | 0 | 0 | 2000 | 3 | 1170 | High | 1906.250000 | 2.666667 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 121 19950 | 19.0 | 51099.0 | NaN | 90.0 | 1 | 0 | 2000 | 5 | 1255 | High | 2689.421053 | 1.583333 | . 548 10750 | 56.0 | 43700.0 | NaN | 86.0 | NaN | 0 | 1300 | 3 | 1025 | Medium | 780.357143 | 4.666667 | . 557 13750 | 54.0 | 40325.0 | NaN | 86.0 | 0 | 0 | 1300 | 5 | 1045 | High | 746.759259 | 4.500000 | . 702 8250 | 63.0 | 94504.0 | NaN | 86.0 | 1 | 0 | 1300 | 4 | 1000 | Low | 1500.063492 | 5.250000 | . 704 8450 | 65.0 | 93408.0 | NaN | 86.0 | 0 | 0 | 1300 | 3 | 1015 | Low | 1437.046154 | 5.416667 | . 724 6900 | 62.0 | 88000.0 | NaN | 86.0 | 0 | 0 | 1300 | 3 | 1020 | Low | 1419.354839 | 5.166667 | . 755 8750 | 62.0 | 80265.0 | NaN | 86.0 | 0 | 0 | 1300 | 3 | 1015 | Medium | 1294.596774 | 5.166667 | . 760 7950 | 60.0 | 80000.0 | NaN | 86.0 | 0 | 0 | 1300 | 5 | 1015 | Low | 1333.333333 | 5.000000 | . 890 7950 | 60.0 | 61100.0 | NaN | 86.0 | 1 | 0 | 1300 | 3 | 1015 | Low | 1018.333333 | 5.000000 | . 898 8950 | 65.0 | 60000.0 | NaN | 86.0 | 1 | 0 | 1300 | 3 | 1015 | Medium | 923.076923 | 5.416667 | . 899 9500 | 62.0 | 59295.0 | NaN | 86.0 | 0 | 0 | 1300 | 5 | 1035 | Medium | 956.370968 | 5.166667 | . 958 8950 | 65.0 | 51000.0 | NaN | 86.0 | 1 | 0 | 1300 | 3 | 1015 | Medium | 784.615385 | 5.416667 | . 1001 8950 | 66.0 | 39222.0 | NaN | 86.0 | 1 | 1 | 1300 | 3 | 1045 | Medium | 594.272727 | 5.500000 | . 1031 10750 | 60.0 | 28500.0 | NaN | 86.0 | 1 | 1 | 1300 | 3 | 1045 | Medium | 475.000000 | 5.000000 | . 1173 6950 | 79.0 | 95000.0 | NaN | 86.0 | 1 | 0 | 1300 | 5 | 1035 | Low | 1202.531646 | 6.583333 | . 1177 7200 | 79.0 | 93090.0 | NaN | 86.0 | 1 | 0 | 1300 | 5 | 1035 | Low | 1178.354430 | 6.583333 | . 1192 6750 | 77.0 | 90000.0 | NaN | 86.0 | 1 | 0 | 1300 | 3 | 1015 | Low | 1168.831169 | 6.416667 | . 1214 8750 | 79.0 | 86000.0 | NaN | 86.0 | 1 | 0 | 1300 | 5 | 1040 | Medium | 1088.607595 | 6.583333 | . 1234 8950 | 71.0 | 83047.0 | NaN | 86.0 | 1 | 1 | 1300 | 3 | 1045 | Medium | 1169.676056 | 5.916667 | . 1237 5950 | 78.0 | 82595.0 | NaN | 86.0 | 1 | 0 | 1300 | 3 | 1015 | Low | 1058.910256 | 6.500000 | . 1364 7500 | 74.0 | 58454.0 | NaN | 86.0 | 1 | 0 | 1300 | 3 | 1015 | Low | 789.918919 | 6.166667 | . 1395 8750 | 76.0 | 49170.0 | NaN | 86.0 | NaN | 0 | 1300 | 3 | 1045 | Medium | 646.973684 | 6.333333 | . 1403 7000 | 73.0 | 47360.0 | NaN | 86.0 | 0 | 0 | 1300 | 3 | 1010 | Low | 648.767123 | 6.083333 | . 1434 7250 | 70.0 | NaN | NaN | 86.0 | 1 | 0 | 1300 | 3 | 1015 | Low | NaN | 5.833333 | . 616 9500 | 62.0 | 147636.0 | NaN | 72.0 | NaN | 0 | 2000 | 5 | 1135 | Medium | 2381.225806 | 5.166667 | . 696 12250 | NaN | 96000.0 | NaN | 72.0 | NaN | 0 | 2000 | 4 | 1100 | High | NaN | NaN | . 1054 8750 | 78.0 | 180378.0 | NaN | 72.0 | 1 | 0 | 2000 | 4 | 1100 | Medium | 2312.538462 | 6.500000 | . 406 10950 | 51.0 | 103018.0 | NaN | 69.0 | 0 | 0 | 1900 | 5 | 1140 | Medium | 2019.960784 | 4.250000 | . 412 8950 | 48.0 | 98100.0 | NaN | 69.0 | 1 | 0 | 1900 | 5 | 1140 | Medium | 2043.750000 | 4.000000 | . 638 10450 | 64.0 | 120400.0 | NaN | NaN | 0 | 0 | 1600 | 5 | 1090 | Medium | 1881.250000 | 5.333333 | . 1436 rows × 13 columns . describe function provides count, mean, standard deviation, minimum, maximum, 25, 50 75 percent of each columns . cars_data2.describe() . Price Age KM HP CC Doors Weight KM_per_month age_converted . count 1436.000000 | 1336.000000 | 1421.000000 | 1430.000000 | 1436.000000 | 1436.000000 | 1436.00000 | 1321.000000 | 1336.000000 | . mean 10730.824513 | 55.672156 | 68647.239972 | 101.478322 | 1566.827994 | 4.033426 | 1072.45961 | 1260.217457 | 4.639346 | . std 3626.964585 | 18.589804 | 37333.023589 | 14.768255 | 187.182436 | 0.952677 | 52.64112 | 638.188748 | 1.549150 | . min 4350.000000 | 1.000000 | 1.000000 | 69.000000 | 1300.000000 | 2.000000 | 1000.00000 | 0.013158 | 0.083333 | . 25% 8450.000000 | 43.000000 | 43210.000000 | 90.000000 | 1400.000000 | 3.000000 | 1040.00000 | 865.000000 | 3.583333 | . 50% 9900.000000 | 60.000000 | 63634.000000 | 110.000000 | 1600.000000 | 4.000000 | 1070.00000 | 1135.762712 | 5.000000 | . 75% 11950.000000 | 70.000000 | 87000.000000 | 110.000000 | 1600.000000 | 5.000000 | 1085.00000 | 1513.965517 | 5.833333 | . max 32500.000000 | 80.000000 | 243000.000000 | 192.000000 | 2000.000000 | 5.000000 | 1615.00000 | 5651.162791 | 6.666667 | . cars_data2 = cars_data2.to_csv(&quot;modified.txt&quot;, sep=&quot; t&quot;, index=False) . os.listdir() . [&#39;.DS_Store&#39;, &#39;Iris_data_sample.txt&#39;, &#39;Iris_data_sample.xlsx&#39;, &#39;filtered.csv&#39;, &#39;Iris_data_sample.csv&#39;, &#39;Toyota.csv&#39;, &#39;modified.txt&#39;] . Aggregate Statistics (Groupby function) . cars_data3 = pd.read_csv(&#39;filtered.csv&#39;) cars_data3[&#39;count&#39;] = 1 cars_data3.groupby([&#39;FuelType&#39;, &#39;HP&#39;]).count()[&#39;count&#39;] . FuelType HP CNG 110.0 15 Diesel 69.0 31 72.0 69 73.0 1 90.0 31 110.0 2 116.0 7 Petrol 71.0 1 86.0 226 97.0 154 98.0 2 107.0 21 110.0 760 116.0 1 192.0 10 Name: count, dtype: int64 . Exploratory Data Analysis . Cross Tabulation . Checking the relationship between two Categorical Variables . pd.crosstab(index=cars_data3[&#39;FuelType&#39;], columns=&#39;count&#39;, dropna=True) . col_0 count . FuelType . CNG 15 | . Diesel 144 | . Petrol 1177 | . pd.crosstab(index = cars_data3[&#39;Automatic&#39;], columns=cars_data3[&#39;FuelType&#39;], dropna=True) . FuelType CNG Diesel Petrol . Automatic . 0 15 | 144 | 1104 | . 1 0 | 0 | 73 | . pd.crosstab(index = cars_data3[&#39;Automatic&#39;], columns=cars_data3[&#39;FuelType&#39;], normalize=True, dropna=True) . FuelType CNG Diesel Petrol . Automatic . 0 0.011228 | 0.107784 | 0.826347 | . 1 0.000000 | 0.000000 | 0.054641 | . pd.crosstab(index = cars_data3[&#39;Automatic&#39;], columns=cars_data3[&#39;FuelType&#39;], margins=True, normalize=True, dropna=True) . FuelType CNG Diesel Petrol All . Automatic . 0 0.011228 | 0.107784 | 0.826347 | 0.945359 | . 1 0.000000 | 0.000000 | 0.054641 | 0.054641 | . All 0.011228 | 0.107784 | 0.880988 | 1.000000 | . Conditional Probability (Row sum) . pd.crosstab(index = cars_data3[&#39;Automatic&#39;], columns=cars_data3[&#39;FuelType&#39;], margins=True, normalize=&#39;index&#39;, dropna=True) . FuelType CNG Diesel Petrol . Automatic . 0 0.011876 | 0.114014 | 0.874109 | . 1 0.000000 | 0.000000 | 1.000000 | . All 0.011228 | 0.107784 | 0.880988 | . Conditional Probability (Column Sum) . pd.crosstab(index = cars_data3[&#39;Automatic&#39;], columns=cars_data3[&#39;FuelType&#39;], margins=True, normalize=&#39;columns&#39;, dropna=True) . FuelType CNG Diesel Petrol All . Automatic . 0 1.0 | 1.0 | 0.937978 | 0.945359 | . 1 0.0 | 0.0 | 0.062022 | 0.054641 | . Correlation . Checking the relationship between Two Numerical Variables . numerical_data = cars_data2.select_dtypes(exclude=[object]) . numerical_data.shape . (1436, 8) . corr_matrix = numerical_data.corr() . corr_matrix . Price Age KM HP MetColor Automatic CC Weight . Price 1.000000 | -0.878407 | -0.574720 | 0.309902 | 0.112041 | 0.033081 | 0.165067 | 0.581198 | . Age -0.878407 | 1.000000 | 0.512735 | -0.157904 | -0.099659 | 0.032573 | -0.120706 | -0.464299 | . KM -0.574720 | 0.512735 | 1.000000 | -0.335285 | -0.093825 | -0.081248 | 0.299993 | -0.026271 | . HP 0.309902 | -0.157904 | -0.335285 | 1.000000 | 0.064749 | 0.013755 | 0.053758 | 0.086737 | . MetColor 0.112041 | -0.099659 | -0.093825 | 0.064749 | 1.000000 | -0.013973 | 0.029189 | 0.057142 | . Automatic 0.033081 | 0.032573 | -0.081248 | 0.013755 | -0.013973 | 1.000000 | -0.069321 | 0.057249 | . CC 0.165067 | -0.120706 | 0.299993 | 0.053758 | 0.029189 | -0.069321 | 1.000000 | 0.651450 | . Weight 0.581198 | -0.464299 | -0.026271 | 0.086737 | 0.057142 | 0.057249 | 0.651450 | 1.000000 | . .",
            "url": "http://gshan.me/2020/08/22/Pandas-Tutorial.html",
            "relUrl": "/2020/08/22/Pandas-Tutorial.html",
            "date": " • Aug 22, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Golang Tutorial for Beginners Tutorial 21- For Loop",
            "content": "Golang Looping Construct :- For Loop . Introduction . Hello and Welcome to Golang Tutorial for Beginners. In this Blog Post, We’ll take a look at Looping Constructs in Golang. . GO has only one Looping Construct. The basic for loop has 3 components separated by semicolons. . the init statement: executed before the first iteration | the condition expression: evaluated before every iteration | the post statement: executed at the end of every iteration | The init statement will often be a short variable declaration, and the variables declared there are visible only in the scope of the for statement. . Simple For Loop . Now let’s look at a simple for loop in Golang. This is a standard way of writing a for loop in Golang and you will see this in most of the codebases you will be writing code into. . package main import &quot;fmt&quot; func main() { // Sum of first 10 whole numbers sum := 0 for i := 0; i &lt; 10; i++ { sum += i } fmt.Println(sum) } .",
            "url": "http://gshan.me/golang/beginners/2020/08/19/Golang-Tutorial-21-For-Loop.html",
            "relUrl": "/golang/beginners/2020/08/19/Golang-Tutorial-21-For-Loop.html",
            "date": " • Aug 19, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "http://gshan.me/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "http://gshan.me/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": ". Hello There!!! Welcome to my Personal Website. . I’m Gunesh Shanbhag and I teach various trending technologies on Youtube. . Currently doing my Masters in Computer Applications at NHCE .",
          "url": "http://gshan.me/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "http://gshan.me/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}